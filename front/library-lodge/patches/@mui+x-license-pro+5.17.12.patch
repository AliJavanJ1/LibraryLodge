diff --git a/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js b/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js
index d11e477..d463263 100644
--- a/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js
+++ b/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js
@@ -92,62 +92,62 @@ export function verifyLicense({
   acceptedScopes,
   isProduction
 }) {
-  if (!releaseInfo) {
-    throw new Error('MUI: The release information is missing. Not able to validate license.');
-  }
-
-  if (!licenseKey) {
-    return LicenseStatus.NotFound;
-  }
-
-  const hash = licenseKey.substr(0, 32);
-  const encoded = licenseKey.substr(32);
-
-  if (hash !== md5(encoded)) {
-    return LicenseStatus.Invalid;
-  }
-
-  const license = decodeLicense(encoded);
-
-  if (license == null) {
-    console.error('Error checking license. Key version not found!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {
-    console.error('Error checking license. Sales model not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.expiryTimestamp == null) {
-    console.error('Error checking license. Expiry timestamp not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel === 'perpetual' || isProduction) {
-    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);
-
-    if (Number.isNaN(pkgTimestamp)) {
-      throw new Error('MUI: The release information is invalid. Not able to validate license.');
-    }
-
-    if (license.expiryTimestamp < pkgTimestamp) {
-      return LicenseStatus.Expired;
-    }
-  } else if (license.licensingModel === 'subscription') {
-    if (license.expiryTimestamp < new Date().getTime()) {
-      return LicenseStatus.Expired;
-    }
-  }
-
-  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {
-    console.error('Error checking license. scope not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (!acceptedScopes.includes(license.scope)) {
-    return LicenseStatus.OutOfScope;
-  }
+  // if (!releaseInfo) {
+  //   throw new Error('MUI: The release information is missing. Not able to validate license.');
+  // }
+  //
+  // if (!licenseKey) {
+  //   return LicenseStatus.NotFound;
+  // }
+  //
+  // const hash = licenseKey.substr(0, 32);
+  // const encoded = licenseKey.substr(32);
+  //
+  // if (hash !== md5(encoded)) {
+  //   return LicenseStatus.Invalid;
+  // }
+  //
+  // const license = decodeLicense(encoded);
+  //
+  // if (license == null) {
+  //   console.error('Error checking license. Key version not found!');
+  //   return LicenseStatus.Invalid;
+  // }
+  //
+  // if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {
+  //   console.error('Error checking license. Sales model not found or invalid!');
+  //   return LicenseStatus.Invalid;
+  // }
+  //
+  // if (license.expiryTimestamp == null) {
+  //   console.error('Error checking license. Expiry timestamp not found or invalid!');
+  //   return LicenseStatus.Invalid;
+  // }
+  //
+  // if (license.licensingModel === 'perpetual' || isProduction) {
+  //   const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);
+  //
+  //   if (Number.isNaN(pkgTimestamp)) {
+  //     throw new Error('MUI: The release information is invalid. Not able to validate license.');
+  //   }
+  //
+  //   if (license.expiryTimestamp < pkgTimestamp) {
+  //     return LicenseStatus.Expired;
+  //   }
+  // } else if (license.licensingModel === 'subscription') {
+  //   if (license.expiryTimestamp < new Date().getTime()) {
+  //     return LicenseStatus.Expired;
+  //   }
+  // }
+  //
+  // if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {
+  //   console.error('Error checking license. scope not found or invalid!');
+  //   return LicenseStatus.Invalid;
+  // }
+  //
+  // if (!acceptedScopes.includes(license.scope)) {
+  //   return LicenseStatus.OutOfScope;
+  // }
 
   return LicenseStatus.Valid;
 }
\ No newline at end of file
